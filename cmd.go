package main

import (
	"os"

	"github.com/Riften/goMesaTracer/common"
	"github.com/Riften/goMesaTracer/stack"
	"gopkg.in/alecthomas/kingpin.v2"
)

// Note: cmd tool need to use the macro definition in main.go.
// So we can not move cmd to a separate package.

type cmdMap map[string]func() error

// Run the cmd tool
func Run() error {
	appCmd := kingpin.New("MesaTracer", "MesaTracer is a command line tool used to analyze trace from "+
		"glmark2 and mesa generated by libMesaTracer.so.")
	cmds := make(cmdMap)

	stackCmd := appCmd.Command("stack", "Reconstruct the call stack from trace.")
	stackInFile := stackCmd.Flag("input", "Input trace file.").Short('i').Default(common.DefaultOutFile).String()
	stackOutFile := stackCmd.Flag("output", "Out stack file.").Short('o').String()
	stackFull := stackCmd.Flag("full", "Analyze the trace in full mode or not.").Bool()
	cmds[stackCmd.FullCommand()] = func() error {
		return stack.CmdStack(*stackInFile, *stackOutFile, *stackFull)
	}

	statisticCmd := appCmd.Command("statistic", "Statistics average duration for different calls.")
	statisticInFile := statisticCmd.Flag("input", "Input trace file.").Short('i').Default(common.DefaultOutFile).String()
	statisticOutFile := statisticCmd.Flag("output", "Out statistic result.").Short('o').String()
	statisticCallToCompare1 := statisticCmd.Flag("call1", "The first call to compare.").Short('f').Default(common.DefaultCallToCompare).String()
	statisticCallToCompare2 := statisticCmd.Flag("call2", "The second call to compare").Short('s').String()
	cmds[statisticCmd.FullCommand()] = func() error {
		return stack.CmdStatistic(*statisticInFile, *statisticOutFile, *statisticCallToCompare1, *statisticCallToCompare2)
	}

	filterCmd := appCmd.Command("filter", "Filter the raw trace.")
	filterInFile := filterCmd.Flag("input", "Input trace file.").Short('i').Default(common.DefaultOutFile).String()
	filterOutFile := filterCmd.Flag("output", "Out filtered trace file").Short('o').String()
	cmds[filterCmd.FullCommand()] = func() error {
		return cmdFilter(*filterInFile, *filterOutFile)
	}

	translateCmd := appCmd.Command("translate", "Translate flags into names.")
	transInFile := translateCmd.Flag("input", "Input trace file.").Short('i').Default(common.DefaultOutFile).String()
	transOutFile := translateCmd.Flag("output", "Out filtered trace file").Short('o').String()
	cmds[translateCmd.FullCommand()] = func() error {
		return cmdTranslate(*transInFile, *transOutFile)
	}

	testCmd := appCmd.Command("test", "Used to test some functionality.")
	testFlagMap := testCmd.Command("flagMap", "Try to extract and printout FlagMap.")
	cmds[testFlagMap.FullCommand()] = func() error {
		common.OutFlagMap()
		return nil
	}

	cmd := kingpin.MustParse(appCmd.Parse(os.Args[1:]))
	for key, value := range cmds {
		if key == cmd {
			return value()
		}
	}
	return nil
}
